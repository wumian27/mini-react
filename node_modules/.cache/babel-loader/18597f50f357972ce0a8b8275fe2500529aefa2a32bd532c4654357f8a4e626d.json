{"ast":null,"code":"var _jsxFileName = \"/Users/wujiamian/Desktop/shouxie/mini-react/src/index.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Comp = /*#__PURE__*/_jsxDEV(\"div\", {\n  id: \"comp\",\n  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"text1\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"text2\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 3,\n  columnNumber: 3\n}, this);\nconsole.log(Comp);\n\n// document.getElementById('root')\nconst render = (virtualDom, container) => {\n  const {\n    type,\n    props\n  } = virtualDom;\n  const dom = document.createElement(type);\n  Object.keys(props).filter(prop => prop !== 'children').forEach(prop => {\n    //将props 属性挂在dom结构上，但排除children属性\n    // 注意 这是简单对属性处理，还需要对style 事件进行特色处理\n    dom[prop] = props[prop];\n  });\n  // 如果children是数组，递归调用 render函数\n  // 注意这是react.16之前版本 stack 递归渲染方式，但会存在问题，如果子阶段很多，js执行时间过长，会操作页面卡顿\n  if (Array.isArray(props.children)) {\n    props.children.forEach(child => render(child, dom));\n  } else {\n    dom.textContent = props.children;\n  }\n  container.appendChild(dom);\n};\nrender(Comp, document.getElementById('root'));","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Comp","id","children","fileName","_jsxFileName","lineNumber","columnNumber","console","log","render","virtualDom","container","type","props","dom","document","createElement","Object","keys","filter","prop","forEach","Array","isArray","child","textContent","appendChild","getElementById"],"sources":["/Users/wujiamian/Desktop/shouxie/mini-react/src/index.js"],"sourcesContent":["import React from 'react';\nconst Comp = (\n  <div id=\"comp\">\n    <p>text1</p>\n    <p>text2</p>\n    </div>\n)\nconsole.log(Comp)\n\n// document.getElementById('root')\nconst render = (virtualDom,container) => {\n  const {type, props} = virtualDom\n  const dom = document.createElement(type) \n  Object.keys(props).filter(prop => prop !=='children').forEach(prop => {\n    //将props 属性挂在dom结构上，但排除children属性\n    // 注意 这是简单对属性处理，还需要对style 事件进行特色处理\n    dom[prop] = props[prop]\n  })\n  // 如果children是数组，递归调用 render函数\n  // 注意这是react.16之前版本 stack 递归渲染方式，但会存在问题，如果子阶段很多，js执行时间过长，会操作页面卡顿\n  if(Array.isArray(props.children)) {\n     props.children.forEach(child => render(child, dom))\n  }else {\n    dom.textContent = props.children\n  }\n  container.appendChild(dom)\n}\n\nrender(Comp, document.getElementById('root'))"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC1B,MAAMC,IAAI,gBACRD,OAAA;EAAKE,EAAE,EAAC,MAAM;EAAAC,QAAA,gBACZH,OAAA;IAAAG,QAAA,EAAG;EAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC,eACZP,OAAA;IAAAG,QAAA,EAAG;EAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;AAAA;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACP,CACR;AACDC,OAAO,CAACC,GAAG,CAACR,IAAI,CAAC;;AAEjB;AACA,MAAMS,MAAM,GAAGA,CAACC,UAAU,EAACC,SAAS,KAAK;EACvC,MAAM;IAACC,IAAI;IAAEC;EAAK,CAAC,GAAGH,UAAU;EAChC,MAAMI,GAAG,GAAGC,QAAQ,CAACC,aAAa,CAACJ,IAAI,CAAC;EACxCK,MAAM,CAACC,IAAI,CAACL,KAAK,CAAC,CAACM,MAAM,CAACC,IAAI,IAAIA,IAAI,KAAI,UAAU,CAAC,CAACC,OAAO,CAACD,IAAI,IAAI;IACpE;IACA;IACAN,GAAG,CAACM,IAAI,CAAC,GAAGP,KAAK,CAACO,IAAI,CAAC;EACzB,CAAC,CAAC;EACF;EACA;EACA,IAAGE,KAAK,CAACC,OAAO,CAACV,KAAK,CAACX,QAAQ,CAAC,EAAE;IAC/BW,KAAK,CAACX,QAAQ,CAACmB,OAAO,CAACG,KAAK,IAAIf,MAAM,CAACe,KAAK,EAAEV,GAAG,CAAC,CAAC;EACtD,CAAC,MAAK;IACJA,GAAG,CAACW,WAAW,GAAGZ,KAAK,CAACX,QAAQ;EAClC;EACAS,SAAS,CAACe,WAAW,CAACZ,GAAG,CAAC;AAC5B,CAAC;AAEDL,MAAM,CAACT,IAAI,EAAEe,QAAQ,CAACY,cAAc,CAAC,MAAM,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}