{"ast":null,"code":"let oneFrameTime = 100 / 60; //16.6 浏览器每帧时间\nlet dealTime;\nlet pendingCb;\nconst channel = new MessageChannel();\nwindow.requestIdleCallback = (cb, options) => {\n  window.requestAnimationFrame(rafTime => {\n    // rafTime 可以看着一帧开始时间等于 performance.timing.navigationStart + performance.now()\n    // 一帧结束时间\n    dealTime = rafTime + oneFrameTime; //\n    pendingCb = cb;\n    channel.port1.postMessage('');\n  });\n};\nconst timeRemaining = () => dealTime - performance.now();\n// 接受 port1发送给来的信息\n// 根据浏览器时间循环机制可知，当微任务执行完，浏览器开始渲染，渲染完成开始执行宏任务，即（messageChannel事件）\nchannel.port2.onmessage = () => {\n  const currentTime = performance.now();\n  const didTimeout = dealTime <= currentTime;\n  console.log(didTimeout, 'didTimeout');\n  if (didTimeout || timeRemaining() > 0) {\n    if (pendingCb) {\n      pendingCb({\n        didTimeout,\n        timeRemaining\n      });\n    }\n  }\n};\nconst sleep = duration => {\n  const start = Date.now();\n  while (start + duration > Date.now()) {}\n};\nconst queue = [() => {\n  console.log('A开始');\n  sleep(20);\n  console.log('A结束');\n}, () => {\n  console.log('B开始');\n  sleep(20);\n  console.log('B结束');\n}];\nconst workLoop = dealTime => {\n  console.log(`本帧剩余时间${dealTime.timeRemaining()}`);\n  // 如果有剩余时间 并且有任务 \n  while (dealTime.timeRemaining() && queue.length) {\n    performUnitOfWork();\n  }\n\n  // 如果没有剩余时间，当还有任务存在\n  if (queue.length) {\n    requestIdleCallback(workLoop);\n  }\n};\nconst performUnitOfWork = () => {\n  const task = queue.shift();\n  task();\n};\nrequestIdleCallback(workLoop);","map":{"version":3,"names":["oneFrameTime","dealTime","pendingCb","channel","MessageChannel","window","requestIdleCallback","cb","options","requestAnimationFrame","rafTime","port1","postMessage","timeRemaining","performance","now","port2","onmessage","currentTime","didTimeout","console","log","sleep","duration","start","Date","queue","workLoop","length","performUnitOfWork","task","shift"],"sources":["/Users/wujiamian/Desktop/shouxie/mini-react/src/index.js"],"sourcesContent":["let oneFrameTime = 100 / 60 //16.6 浏览器每帧时间\nlet dealTime\nlet pendingCb\nconst channel = new MessageChannel()\nwindow.requestIdleCallback = (cb, options) => {\n\n  window.requestAnimationFrame((rafTime) => {\n    // rafTime 可以看着一帧开始时间等于 performance.timing.navigationStart + performance.now()\n    // 一帧结束时间\n    dealTime = rafTime + oneFrameTime //\n    pendingCb = cb\n    channel.port1.postMessage('')\n  })\n}\n\nconst timeRemaining = () =>  dealTime - performance.now()\n// 接受 port1发送给来的信息\n// 根据浏览器时间循环机制可知，当微任务执行完，浏览器开始渲染，渲染完成开始执行宏任务，即（messageChannel事件）\nchannel.port2.onmessage = () => {\n  const currentTime = performance.now()\n  const didTimeout = dealTime <= currentTime\n  console.log(didTimeout,'didTimeout');\n  if (didTimeout || timeRemaining() > 0) {\n    if(pendingCb){\n        pendingCb({didTimeout,timeRemaining})\n    }\n  }\n}\n\nconst sleep = (duration) => {\n   const start = Date.now() \n   while (start + duration > Date.now()) {}\n}\n\nconst queue = [\n  () => {\n    console.log('A开始')\n    sleep(20)\n    console.log('A结束')\n  },\n  () => {\n    console.log('B开始')\n    sleep(20)\n    console.log('B结束')\n  },\n]\n\n\n\nconst workLoop = (dealTime) => {\n\n  console.log(`本帧剩余时间${dealTime.timeRemaining()}`)\n  // 如果有剩余时间 并且有任务 \n  while(dealTime.timeRemaining() && queue.length) {\n    performUnitOfWork()\n  }\n\n  // 如果没有剩余时间，当还有任务存在\n  if(queue.length) {\n    requestIdleCallback(workLoop)\n  }\n}\n\nconst performUnitOfWork = () => {\n  const task = queue.shift()\n  task()\n}\n\nrequestIdleCallback(workLoop)\n\n"],"mappings":"AAAA,IAAIA,YAAY,GAAG,GAAG,GAAG,EAAE,EAAC;AAC5B,IAAIC,QAAQ;AACZ,IAAIC,SAAS;AACb,MAAMC,OAAO,GAAG,IAAIC,cAAc,CAAC,CAAC;AACpCC,MAAM,CAACC,mBAAmB,GAAG,CAACC,EAAE,EAAEC,OAAO,KAAK;EAE5CH,MAAM,CAACI,qBAAqB,CAAEC,OAAO,IAAK;IACxC;IACA;IACAT,QAAQ,GAAGS,OAAO,GAAGV,YAAY,EAAC;IAClCE,SAAS,GAAGK,EAAE;IACdJ,OAAO,CAACQ,KAAK,CAACC,WAAW,CAAC,EAAE,CAAC;EAC/B,CAAC,CAAC;AACJ,CAAC;AAED,MAAMC,aAAa,GAAGA,CAAA,KAAOZ,QAAQ,GAAGa,WAAW,CAACC,GAAG,CAAC,CAAC;AACzD;AACA;AACAZ,OAAO,CAACa,KAAK,CAACC,SAAS,GAAG,MAAM;EAC9B,MAAMC,WAAW,GAAGJ,WAAW,CAACC,GAAG,CAAC,CAAC;EACrC,MAAMI,UAAU,GAAGlB,QAAQ,IAAIiB,WAAW;EAC1CE,OAAO,CAACC,GAAG,CAACF,UAAU,EAAC,YAAY,CAAC;EACpC,IAAIA,UAAU,IAAIN,aAAa,CAAC,CAAC,GAAG,CAAC,EAAE;IACrC,IAAGX,SAAS,EAAC;MACTA,SAAS,CAAC;QAACiB,UAAU;QAACN;MAAa,CAAC,CAAC;IACzC;EACF;AACF,CAAC;AAED,MAAMS,KAAK,GAAIC,QAAQ,IAAK;EACzB,MAAMC,KAAK,GAAGC,IAAI,CAACV,GAAG,CAAC,CAAC;EACxB,OAAOS,KAAK,GAAGD,QAAQ,GAAGE,IAAI,CAACV,GAAG,CAAC,CAAC,EAAE,CAAC;AAC1C,CAAC;AAED,MAAMW,KAAK,GAAG,CACZ,MAAM;EACJN,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC;EAClBC,KAAK,CAAC,EAAE,CAAC;EACTF,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC;AACpB,CAAC,EACD,MAAM;EACJD,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC;EAClBC,KAAK,CAAC,EAAE,CAAC;EACTF,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC;AACpB,CAAC,CACF;AAID,MAAMM,QAAQ,GAAI1B,QAAQ,IAAK;EAE7BmB,OAAO,CAACC,GAAG,CAAE,SAAQpB,QAAQ,CAACY,aAAa,CAAC,CAAE,EAAC,CAAC;EAChD;EACA,OAAMZ,QAAQ,CAACY,aAAa,CAAC,CAAC,IAAIa,KAAK,CAACE,MAAM,EAAE;IAC9CC,iBAAiB,CAAC,CAAC;EACrB;;EAEA;EACA,IAAGH,KAAK,CAACE,MAAM,EAAE;IACftB,mBAAmB,CAACqB,QAAQ,CAAC;EAC/B;AACF,CAAC;AAED,MAAME,iBAAiB,GAAGA,CAAA,KAAM;EAC9B,MAAMC,IAAI,GAAGJ,KAAK,CAACK,KAAK,CAAC,CAAC;EAC1BD,IAAI,CAAC,CAAC;AACR,CAAC;AAEDxB,mBAAmB,CAACqB,QAAQ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}